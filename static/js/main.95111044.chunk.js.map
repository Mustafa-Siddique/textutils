{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/Textforms.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","navBrand","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","name","autocomplete","onClick","toggleMode","checked","for","disabled","defaultProps","Textforms","useState","text","setText","heading","value","onChange","event","target","style","backgroundColor","color","rows","placeholder","upText","showAlert","lowText","loremIpsum","count","format","paragraphLowerBound","units","split","length","toFixed","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.95111044.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Alert(props) {\n\n  const capitalize = (word) => {\n    const lower = word.toLowerCase();\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\n  }\n\n  return (\n    props.alert && <div className=\"container my-3\">\n      <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n        <strong>{capitalize(props.alert.type)} </strong> {props.alert.msg}\n        {/* <button\n          type=\"button\"\n          className=\"btn-close\"\n          data-bs-dismiss=\"alert\"\n          aria-label=\"Close\"\n        ></button> */}\n      </div>\n    </div>\n  );\n}","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <a className=\"navbar-brand\" href=\"/\">\n          {props.navBrand}\n        </a>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav ms-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\n                Home\n              </a>\n            </li>\n            <li className=\"nav-item\">\n              <a className=\"nav-link\" href=\"/\">\n                {props.aboutText}\n              </a>\n            </li>\n          </ul>\n          <div className=\"form-check form-switch\">\n            {/* <input\n              className=\"form-check-input\"\n              type=\"checkbox\"\n              role=\"switch\"\n              id=\"flexSwitchCheckChecked\"\n              onClick={props.toggleMode}\n            />\n            <label className={`form-check-label\" for=\"flexSwitchCheckChecked text-${props.mode==='light'?'Dark':'light'}`}>\n              Dark Mode\n            </label> */}\n            <input\n              type=\"radio\"\n              className=\"btn-check\"\n              name=\"options\"\n              id=\"option1\"\n              autocomplete=\"off\"\n              onClick={props.toggleMode}\n              checked\n            />\n            <label className=\"btn btn-dark mx-1\" for=\"option1\">\n              Dark Mode\n            </label>\n\n            <input\n              type=\"radio\"\n              className=\"btn-check\"\n              name=\"options\"\n              id=\"option2\"\n              autocomplete=\"off\"\n            />\n            <label className=\"btn btn-secondary mx-1\" for=\"option2\">\n              Radio\n            </label>\n\n            <input\n              type=\"radio\"\n              className=\"btn-check\"\n              name=\"options\"\n              id=\"option3\"\n              autocomplete=\"off\"\n              disabled\n            />\n            <label className=\"btn btn-success mx-1\" for=\"option3\">\n              Disabled\n            </label>\n\n            <input\n              type=\"radio\"\n              className=\"btn-check\"\n              name=\"options\"\n              id=\"option4\"\n              autocomplete=\"off\"\n            />\n            <label className=\"btn btn-warning mx-1\" for=\"option4\">\n              Radio\n            </label>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  navBrand: PropTypes.string.isRequired,\n  aboutText: PropTypes.string.isRequired,\n};\n\nNavbar.defaultProps = {\n  aboutText: \"About\",\n};\n","import React, {useState} from \"react\";\nimport {LoremIpsum, loremIpsum} from \"lorem-ipsum\";\n\nexport default function Textforms(props) {\n  const handleUpClick = () => {\n    // console.log('You have clicked handleUpClick')\n    let upText = text.toUpperCase();\n    setText(upText);\n    props.showAlert('Converted to Upper Case', 'success')\n  }\n\n  const handleLowClick = () => {\n    let lowText = text.toLowerCase();\n    setText(lowText);\n    props.showAlert('Converted to Lower Case', 'success')\n  }\n\n  const clear = (event) => {\n    setText(\"\")\n    props.showAlert('Text Box Cleared', 'warning')\n  }\n\n  const loremGenerator = () => {\n    setText(loremIpsum({\n      count:5,\n      format:'plain',\n      paragraphLowerBound: 4,\n      units: 'paragraphs'\n    }));\n    props.showAlert('Random Paragraph Generated', 'success')\n  }\n\n  const handleOnChange = (event) => {\n    // console.log('On Change');\n    setText(event.target.value)\n  }\n\n  const [text, setText] = useState('')\n  return (\n    <div>\n      <div className=\"mb-3\">\n        <h1>{props.heading}</h1>\n        <textarea\n          className=\"form-control\"\n          value={text}\n          onChange={handleOnChange}\n          id=\"myBox\"\n          style={{backgroundColor: props.mode==='dark'?'#212529':'white', color: props.mode==='dark'?'white':'#212529'}}\n          rows=\"8\"\n          placeholder=\"Enter Text Here...!!!\"\n        ></textarea>\n        <button className=\"btn btn-primary my-2\" onClick={handleUpClick}>Convert to Uppercase</button>\n        <button className=\"btn btn-primary m-2\" onClick={handleLowClick}>Convert to Lowercase</button>\n        <button className=\"btn btn-primary m-2\" onClick={clear}>Clear</button>\n        <button className=\"btn btn-primary m-2\" onClick={loremGenerator}>Generate Lorem Ipsum</button>\n      </div>\n      <div className=\"container my-5\">\n        <h2>Your Text Summary</h2>\n        <p>{text.split(' ').length} words & {text.length} Characters</p>\n        <p>{(0.008 * text.split(' ').length).toFixed(1)} Minutes Read</p>\n      </div>\n    </div>\n  );\n}","import React, { useState } from 'react'\nimport \"./App.css\";\nimport Alert from './components/Alert';\n// import About from './components/About';\nimport Navbar from \"./components/Navbar\";\nimport Textforms from \"./components/Textforms\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 3000);\n  }\n\n  const toggleMode = () => {\n    if (mode==='light') {\n      setMode('dark')\n      document.body.style.backgroundColor = '#121416';\n      document.body.style.color = '#fff';\n      showAlert('Dark Mode has been Enabled', 'success');\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = '#fff';\n      document.body.style.color = '#000';\n      showAlert('Light Mode has been Enabled', 'success');\n    }\n  }\n\n  return (\n    <>\n      <Navbar navBrand=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        <Textforms showAlert={showAlert} heading=\"Enter the text to Analyze\" mode={mode}/>\n        {/* <About/> */}\n      </div>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}